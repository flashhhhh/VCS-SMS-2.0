// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: proto/server.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ServerAdministrationService_GetAddressAndStatus_FullMethodName = "/server_administration_service.ServerAdministrationService/GetAddressAndStatus"
	ServerAdministrationService_UpdateStatus_FullMethodName        = "/server_administration_service.ServerAdministrationService/UpdateStatus"
)

// ServerAdministrationServiceClient is the client API for ServerAdministrationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServerAdministrationServiceClient interface {
	GetAddressAndStatus(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*IDAddressAndStatusList, error)
	UpdateStatus(ctx context.Context, in *ServerStatusList, opts ...grpc.CallOption) (*EmptyResponse, error)
}

type serverAdministrationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewServerAdministrationServiceClient(cc grpc.ClientConnInterface) ServerAdministrationServiceClient {
	return &serverAdministrationServiceClient{cc}
}

func (c *serverAdministrationServiceClient) GetAddressAndStatus(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*IDAddressAndStatusList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IDAddressAndStatusList)
	err := c.cc.Invoke(ctx, ServerAdministrationService_GetAddressAndStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverAdministrationServiceClient) UpdateStatus(ctx context.Context, in *ServerStatusList, opts ...grpc.CallOption) (*EmptyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, ServerAdministrationService_UpdateStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServerAdministrationServiceServer is the server API for ServerAdministrationService service.
// All implementations must embed UnimplementedServerAdministrationServiceServer
// for forward compatibility.
type ServerAdministrationServiceServer interface {
	GetAddressAndStatus(context.Context, *EmptyRequest) (*IDAddressAndStatusList, error)
	UpdateStatus(context.Context, *ServerStatusList) (*EmptyResponse, error)
	mustEmbedUnimplementedServerAdministrationServiceServer()
}

// UnimplementedServerAdministrationServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedServerAdministrationServiceServer struct{}

func (UnimplementedServerAdministrationServiceServer) GetAddressAndStatus(context.Context, *EmptyRequest) (*IDAddressAndStatusList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAddressAndStatus not implemented")
}
func (UnimplementedServerAdministrationServiceServer) UpdateStatus(context.Context, *ServerStatusList) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStatus not implemented")
}
func (UnimplementedServerAdministrationServiceServer) mustEmbedUnimplementedServerAdministrationServiceServer() {
}
func (UnimplementedServerAdministrationServiceServer) testEmbeddedByValue() {}

// UnsafeServerAdministrationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServerAdministrationServiceServer will
// result in compilation errors.
type UnsafeServerAdministrationServiceServer interface {
	mustEmbedUnimplementedServerAdministrationServiceServer()
}

func RegisterServerAdministrationServiceServer(s grpc.ServiceRegistrar, srv ServerAdministrationServiceServer) {
	// If the following call pancis, it indicates UnimplementedServerAdministrationServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ServerAdministrationService_ServiceDesc, srv)
}

func _ServerAdministrationService_GetAddressAndStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerAdministrationServiceServer).GetAddressAndStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerAdministrationService_GetAddressAndStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerAdministrationServiceServer).GetAddressAndStatus(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerAdministrationService_UpdateStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServerStatusList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerAdministrationServiceServer).UpdateStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerAdministrationService_UpdateStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerAdministrationServiceServer).UpdateStatus(ctx, req.(*ServerStatusList))
	}
	return interceptor(ctx, in, info, handler)
}

// ServerAdministrationService_ServiceDesc is the grpc.ServiceDesc for ServerAdministrationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServerAdministrationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "server_administration_service.ServerAdministrationService",
	HandlerType: (*ServerAdministrationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAddressAndStatus",
			Handler:    _ServerAdministrationService_GetAddressAndStatus_Handler,
		},
		{
			MethodName: "UpdateStatus",
			Handler:    _ServerAdministrationService_UpdateStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/server.proto",
}
